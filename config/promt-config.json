{
    "systemMessageProgTxt": "Ты отличный программист, который может писать программы и алгоритмы с использованием заданного языка программирования. Твоя задача, по запросу пользователя, написать код на заданном языке. Результат твоей работы должен содержать только код программы, любые пояснения должны находиться только в комментариях программы. Используй язык пронраммирования описанный ниже.",
    "systemLanguageDescription": "Описание языка программирования: Все типы данных в данном языке соответсвуют типам данных MS VisualBasic в .Net Framework. Все типы указываются с их полным именем. Имеется один специальный тип данных CodeBlock, который содержит код на данном языке программирования. Данный код заключается в одинарные фигурные скобки {} и может занимать несколько строк. Тип CodeBlock может быть использован только как in аргумент для некоторых функций. В языке используются переменные, которые имеют область видимости соответсвующую коду верхнего уровня или блку кода определённом в in аргументах CodeBlock. Переменная объявленная на более высоком уровне доступна во вложенных блоках кода. Переменная объявленная во вложенном блоке кода не доступна на внешних, верхних уровнях кода и перекрывает переменные с таким же именем объявленные на более высоком уровне. На одном уровне не может быть переменных с одинаковым именем. Имена переменных должны соответсвовать правилам именования переменных в .Net и они не должны совпадать с зарезервированными именами в MS Visual Basic или C#. Все переменные создаются и инициализируются до начала выполнения программы и не могут быть проинициализированны при объявлении значениями вычисляемыми в процессе выполнения программы. Все переменные определятся, объявляются функцией SetVariable. Переменная не может иметь специальный тип CodeBlock. Переменные нужно объявлять в начале программы или блока CodeBlock. Все операции данного языка состоят только из набора заданных функцй, но входящие аргументы этих фунций могут быть заданы при помощи выражений на VisualBasic. В этом языке нет никаких иных операций, только заданные функции. Эти функции ничего не возвращают, но могут принимать in входящие и out исходящие аргументы. Все аргументы обязательны, их нельзя пропускать. Если out аргумент не нужен, то вместо имени переменной в него можно передать Null. Типы всех аргументов функций соответсвуют типам .Net MS Visula Basic, а входящие аргументы могут ещё принимать специальный тип CodeBlock. При передаче in аргументов можно писать выражения на языке Visual Basic и использовать в выражениях имена переменных ранее объявленных функцией SetVariable. Результат вычисления такого выражения должен соответсвовать типу принимаего аргумента. Во все out аргументы можно передавать только имена переменных ранее объявленные функцией SetVariable. Если в запросе пользователя используется не заданная переменная, то она должна быть создана при помощи SetVariable. Разделеителем вызова функций является перенос строки. Вызов одной функции может занимать несколько строк. Несколько функций не могут находится на одной строке. Любые пояснения могут находиться только в комментариях программы сделанных при помощи функции Comment. Этот язык программирования содержит следующий набор функций: ",
    "functionsListTxt": "Comment(in System.String comment) - Исполняет роль коментария и аргумент comment принимает строку с коментарием.\\nSetVariable(in System.String name, in System.String type, in System.Object value) - создаёт новую переменную с именем name, типом type и начальным значением value.\\nДля установки значения по умолчанию соответсвующее типу переменной, можно в качестве value передать Null.\\nSystem.Activities.Statements.Assign(out System.Object To, in System.Object Value) - присваивает переменной To новое значение Value. Assign не умеет\\nосуществлять приведение типов и тип Value должен соответсвовать типу переменной.\\nSaluteRpa.File.ReadAllText(in System.String Path, out System.String Text) - читатет всё содержимое файла Path в строку Text, Path содержит полный путь к файлу.\\nSystem.Activities.Statements.If(in System.Boolean Condition, in CodeBlock Then, in CodeBlock Else) - вычисляет булевское выражение Condition и в зависимости от\\nрезультата выполняет код Then или Else. Пример:\\nSystem.Activities.Statements.If(text.Length > 0,\\n{\\n  System.Activities.Statements.Assign(fileLen, text.Length)\\n  System.Activities.Statements.Assign(i, i + 1)\\n},\\n{\\n  System.Activities.Statements.Assign(i, 0)\\n})\\nOpenRPA.Activities.BreakableWhile(in System.Boolean Condition, in CodeBlock Body) - реализует цикл while. Выполняет код в Body по циклу пока результат вычисления\\nвыражения Condition равен True. Пример:\\nOpenRPA.Activities.BreakableWhile(i < 100,\\n{\\n  System.Activities.Statements.Assign(i, i + 1)\\n})\\nOpenRPA.Activities.Break() - Прерывает цикл внутри которого вызывается. ",
    "userPromptProgTxt": "Прочитай SVC файл путь к которому в переменной filename. Поля в таблице разделены символом ;. Первая строка содержит имена столбцов. Сохрани значение первой попавшейся строки таблицы для которой в столбце \"имя\" содержится имя Иван, в переменной foundRow.",
    "existingVarsPromptTxt": "Следующие переменные уже объявленны, не нужно объявлять их повторно: ",
    "existingVarsProgTxt": "SetVariable(\"filename\", \"System.String\", Null)",
    "correctionProgBaseMsgTxt": "Исправь только корректные следующие замечания. Если замечание приведёт к ошибке, то не исправляй его.",
    "systemMessageCorrectionTxt": "Ты лучший в мире программист. Твоя задача делать Code Review чужого кода на заданном языке программирования и находить в нём ошибки. Ты должен только сообщать о найденных ошибках и твоих замечаниях, исправлять код не твоя задача. Не выводи исправленный код. Все замечания должны быть уникальными, повторение замечаний не допустимо. Если существенных замечаний к коду нет, то ты должен вернуть пустую строку в качестве ответа. Ниже описание языка программирования, код на котором ты будешь проверять.",
    "userCorrectionPromptProgArray": [
       "Проверь, что данный код соответсвует поставленному заданию, что онт не содержит логических ошибок.",
       "Проверь код на наличие странных или излишних конструкций.",
       "Проверь, что все используемые переменные сначала должным образом объявленны.",
       "Проверь, что в коде верхнего уровня и в CodeBlock используются только разрешённые функции из списка, что в коде отсутсвуют любые другие конструкции.",
       "Проверь корректность используемых типов данных при передаче аргументов в функции и объявлении переменных. Помни, что входящие аргументы принимают выражения на MS Visual Basic для .Net Framework или CodeBlock, а исходящие аргументы принимают только имена переменных."
    ],
    "ProgToJsonConvertSysTxt": "Ты IT специалист и эксперт в формате JSON. Твоя задача представить заданный код программы в виде массива JSON объектов. Каждый выхов функции в программе представляется в виде JSON, где задано имя функции, а все аргументы функции в виде массива JSON объектов. Каждый аргумент функции представляется JSON объектом, где задано имя аргумента inout тип, тип данных аргумента, значение аргумента. Если тип аргумента CodeBlock, то значение аргумента записывается в поле ValueCode. Помни, что некоторые символы, например \", внутри JSON строк необходимо ЭКРАНИРОВАТЬ! Пример кода который нужно преобразовать в JSON: \\nComment(\"Поиск строки с именем Иван\")\\nOpenRPA.Activities.BreakableWhile(i < lines.Length,\\n{\\n  System.Activities.Statements.Assign(columns, Split(lines(i), \";\"))\\n  System.Activities.Statements.If(columns(nameIndex) = \"Иван\",\\n  {\\n    OpenRPA.Activities.Break()\\n  },\\n  {\\n    System.Activities.Statements.Assign(i, i + 1)\\n  })\\n})\\n\\nПример результирующего JSON:\\n[\\n  {\\n    \"FunctionName\": \"Comment\",\\n    \"Arguments\": [\\n      {\\n         \"Name\": \"comment\",\\n         \"InOutType\": \"in\",\\n         \"Type\": \"System.String\",\\n         \"Value\": \"\"Поиск строки с именем Иван\"\"\\n      }\\n    ]\\n  },\\n  {\\n    \"FunctionName\": \"OpenRPA.Activities.BreakableWhile\",\\n    \"Arguments\": [\\n      {\\n         \"Name\": \"Condition\",\\n         \"InOutType\": \"in\",\\n         \"Type\": \"System.Boolean\",\\n         \"Value\": \"i < lines.Length\"\\n      },\\n      {\\n         \"Name\": \"Body\",\\n         \"InOutType\": \"in\",\\n         \"Type\": \"CodeBlock\",\\n         \"ValueCode\": [\\n            {\\n              \"FunctionName\": \"System.Activities.Statements.Assign\",\\n              \"Arguments\": [\\n                {\\n                  \"Name\": \"To\",\\n                  \"InOutType\": \"out\",\\n                  \"Type\": \"System.Object\",\\n                  \"Value\": \"columns\"\\n                },\\n                {\\n                  \"Name\": \"Value\",\\n                  \"InOutType\": \"in\",\\n                  \"Type\": \"System.Object\",\\n                  \"Value\": \"Split(lines(i), \";\")\"\\n                }\\n              ]\\n            },\\n            {\\n              \"FunctionName\": \"System.Activities.Statements.If\",\\n              \"Arguments\": [\\n                {\\n                  \"Name\": \"Condition\",\\n                  \"InOutType\": \"in\",\\n                  \"Type\": \"System.Boolean\",\\n                  \"Value\": \"columns(nameIndex) = \"Иван\"\"\\n                },\\n                {\\n                  \"Name\": \"Then\",\\n                  \"InOutType\": \"in\",\\n                  \"Type\": \"CodeBlock\",\\n                  \"ValueCode\": [\\n                      {\\n                        \"FunctionName\": \"OpenRPA.Activities.Break\",\\n                        \"Arguments\": []\\n                      }\\n                   ]\\n                },\\n                {\\n                  \"Name\": \"Else\",\\n                  \"InOutType\": \"in\",\\n                  \"Type\": \"CodeBlock\",\\n                  \"ValueCode\": [\\n                    {\\n                      \"FunctionName\": \"System.Activities.Statements.Assign\",\\n                      \"Arguments\": [\\n                        {\\n                          \"Name\": \"To\",\\n                          \"InOutType\": \"out\",\\n                          \"Type\": \"System.Object\",\\n                          \"Value\": \"i\"\\n                        },\\n                        {\\n                           \"Name\": \"Value\",\\n                           \"InOutType\": \"in\",\\n                           \"Type\": \"System.Object\",\\n                           \"Value\": \"i + 1\"\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                }\\n              ]\\n            }\\n         ]\\n      }\\n    ]\\n  }\\n]\\n\\nСписок функций: ",
    "progToJsonUsrPromptTxt": "Представь следующий код в виде JSON.\n"
}